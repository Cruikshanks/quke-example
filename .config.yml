# Normally Capybara expects to be testing an in-process Rack application, but
# we're using it to talk to a remote host. Users of Quke can set what this will
# be by simply setting `app_host`. You can then use it directly using
# Capybara `visit('/Main_Page')` or `visit('/')` rather than having to repeat
# the full url each time. When using the Site_Prism page_objects use
# `set_url '/Main_Page'`. The default is ''.
app_host: "http://localhost:4567"

# Tells Quke which browser to use for testing. Choices are firefox, chrome
# and browserstack. We have tests that depend on Chrome being used hence it's
# set here
driver: chrome

# Let Quke know you want to run the browser in headless mode. Headless mode
# means the browser still runs but you won't see it displayed. The benefit is
# that your tests will take less time as it's less resource intensive.
# Only when debugging do we need to see the UI so we default to running headless
headless: true

# Specify whether Quke should stop all tests once an error occurs. Useful in
# Continuous Integration (CI) environments where a quick Yes/No is preferable to
# a detailed response. By default Quke sets this to false if not set in the
# config.
# We set it to true because the assumption is all tests should pass so we want
# to stop immediately if anything fails
stop_on_error: true

# By default Quke will display web pages where a failure has taken place.
# A copy of the html is saved and Quke will display it in your default browser.
# This can be useful to diagnose why something has failed, but there are times
# you may not want Quke to do this.
#
# As we run headless by default we also set this to false.
display_failures: false

# Tell the driver Quke is using to send a different user-agent value to the site
# under test. Useful if you want the underlying driver to spoof what kind of
# browser the request is coming from. For example you may want to pretend to be
# a mobile browser so you can check what you get back versus the desktop
# version. Or you want to pretend to be another kind of browser, because the one
# you have is not supported by the site.
#
# We have this set because we have examples of tests that check what has been
# set for the user agent
user_agent: "Mozilla/5.0 (MSIE 10.0; Windows NT 6.1; Trident/5.0)"
